---
layout: default
title: Running xUnit.net tests in MSBuild
breadcrumb: Documentation
---
# Running xUnit.net tests in MSBuild

xUnit.net includes a runner which can be used from your MSBuild scripts to run unit tests. The runner is contained in the NuGet package `xunit.runner.msbuild`.

## Table of Contents
* [Running a single assembly](#single)
* [Running multiple assemblies](#multiple)
* [Options for the MSBuild runner](#options)
* [Choosing MSBuild runner vs. Console runner](#choosing)

## <a id="single"></a>Running a single assembly with the &lt;xunit&gt; task

Here is an example MSBuild file using the &lt;xunit&gt; task to run a single assembly:

{% highlight xml %}
<Project
    DefaultTargets="Test"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask
    AssemblyFile="path\to\xunit.runner.msbuild.dll"
    TaskName="Xunit.Runner.MSBuild.xunit"/>

  <Target Name="Test">
    <xunit Assemblies="path\to\MyTests.dll" />
  </Target>

</Project>
{% endhighlight %}

## <a id="multiple"></a>Running multiple assemblies with the &lt;xunit&gt; task

Often, you will want to run multiple assemblies. You can use an [&lt;ItemGroup&gt;](https://msdn.microsoft.com/en-us/library/646dk05y.aspx) in MSBuild to specify which test DLLs to run (including using the wildcard syntax to automatically find test DLLs).

Here is an example MSBuild file using the &lt;xunit&gt; task to run several assemblies:

{% highlight xml %}
<Project
    DefaultTargets="Test"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask
    AssemblyFile="path\to\xunit.runner.msbuild.dll"
    TaskName="Xunit.Runner.MSBuild.xunit" />

  <ItemGroup>
    <TestAssemblies Include="**\bin\Release\*.tests.dll" />
  </ItemGroup>

  <Target Name="Test">
    <xunit Assemblies="@(TestAssemblies)" />
  </Target>

</Project>
{% endhighlight %}

## <a id="options"></a>Options for the MSBuild runner

The `<xunit>` MSBuild task has several options to help you configure your test execution.

{: .table }
| Property                     | Usage |
| :--------------------------- | :---- |
| `Assemblies`                 | **[Required][ItemGroup]** The item group of the assemblies (DLLs) run tests for. |
| `DiagnosticMessages`         | **[Optional][Boolean]** Set to true to include diagnostic messages when running tests. |
| `ExcludeTraits`              | **[Optional][String]** When set, excludes tests that match the given traits (in "Name=Value;Name=Value" format). |
| `Html`                       | **[Optional][String]** Filename where an HTML report will be generated after run. No HTML generated by default. |
| `IncludeTraits`              | **[Optional][String]** When set, only runs tests that match the given traits (in "Name=Value;Name=Value" format).|
| `MaxParallelThreads`         | **[Optional][String]** Controls the number of threads to use when running tests in parallel. Can be set to `default` (one thread per CPU), `unlimited`, or any positive number. |
| `NoLogo`                     | **[Optional][Boolean]** When set, disables the display of the MSBuild runner welcome banner. |
| `NUnit`                      | **[Optional][String]** Filename where an XML report (in NUnit format) will be generated after run. |
| `ParallelizeAssemblies`      | **[Optional][Boolean]** When set to `true`, runs multiple assemblies in parallel. Defaults to `false`. |
| `ParallelizeTestCollections` | **[Optional][Boolean]** When set to `true`, runs multiple test collections in parallel. Defaults to `true`. |
| `Reporter`                   | **[Optional][String]** Selects a reporter to use for printing test results. Default reporters include `teamcity`, `appveyor`, `verbose`, and `quiet`. Third parties can add additional reporter options. |
| `ShadowCopy`                 | **[Optional][Boolean]** Determines whether the tests are run as a shadow copy. Defaults to "true". |
| `Verbose`                    | **[Optional][Boolean]** Enables verbose output, which logs both start and finish of tests (rather than just finish). Defaults to "false". |
| `WorkingFolder`              | **[Optional][String]** The working folder where the tests are executed from. Defaults to the folder containing the assembly DLL. |
| `Xml`                        | **[Optional][String]** Filename where an XML report (in xUnit.net v2 format) will be generated after run. |
| `XmlV1`                      | **[Optional][String]** Filename where an XML report (in xUnit.net v1 format) will be generated after run. |

**Note:** When running multiple assemblies, you can specify the configuration file for each assembly using [ItemGroup metadata](https://msdn.microsoft.com/en-us/library/646dk05y.aspx). The &lt;xunit&gt; task looks for metadata named `ConfigFile` on each item in your item group.

## <a id="choosing"></a>Choosing MSBuild runner vs. Console runner

You can use an [&lt;exec&gt; task](https://msdn.microsoft.com/en-us/library/x8zx72cd.aspx) in MSBuild to run the console runner. You may choose to use the console runner if you need more control over running tests in 32- vs. 64-bit environments. When using the MSBuild runner, you are restricted to the bitness choice of the MSBuild executable that you used to run your build.
